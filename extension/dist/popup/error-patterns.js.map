{"version":3,"file":"popup/error-patterns.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://extension/webpack/bootstrap","webpack://extension/webpack/runtime/make namespace object","webpack://extension/./popup/error-patterns.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * Error Patterns UI handler for DSA Tracker\r\n * Displays error patterns and categories to help users learn from mistakes\r\n */\r\n\r\ndocument.addEventListener('DOMContentLoaded', async function() {\r\n  // Elements\r\n  const connectionStatus = document.getElementById('connection-status');\r\n  const patternsList = document.getElementById('patterns-list');\r\n  const patternDetails = document.getElementById('pattern-details');\r\n  const backToListButton = document.getElementById('back-to-list');\r\n  const tabs = document.querySelectorAll('.tab');\r\n  const tabContents = document.querySelectorAll('.tab-content');\r\n  \r\n  // Pagination elements\r\n  const prevPageButton = document.getElementById('prev-page');\r\n  const nextPageButton = document.getElementById('next-page');\r\n  const pageInfo = document.getElementById('page-info');\r\n  \r\n  // Pagination state\r\n  let currentPage = 1;\r\n  let totalPages = 1;\r\n  const limit = 10;\r\n  \r\n  // Get API base URL and token from localStorage\r\n  const apiBaseUrl = localStorage.getItem('apiBaseUrl') || 'http://localhost:3000';\r\n  const token = localStorage.getItem('token');\r\n  \r\n  if (!token) {\r\n    connectionStatus.textContent = 'Error: Not authenticated';\r\n    connectionStatus.style.color = 'red';\r\n    patternsList.innerHTML = '<div class=\"empty-state\"><p>Please log in to view error patterns</p></div>';\r\n    return;\r\n  }\r\n  \r\n  // Set connection status\r\n  connectionStatus.textContent = 'Connected';\r\n  connectionStatus.style.color = 'green';\r\n  \r\n  // Initialize tabs\r\n  tabs.forEach(tab => {\r\n    tab.addEventListener('click', () => {\r\n      // Deactivate all tabs\r\n      tabs.forEach(t => t.classList.remove('active'));\r\n      tabContents.forEach(tc => tc.classList.remove('active'));\r\n      \r\n      // Activate clicked tab\r\n      tab.classList.add('active');\r\n      const tabName = tab.getAttribute('data-tab');\r\n      document.getElementById(`${tabName}-tab`).classList.add('active');\r\n      \r\n      // If stats tab is activated, load statistics\r\n      if (tabName === 'stats') {\r\n        loadErrorStatistics();\r\n      }\r\n    });\r\n  });\r\n  \r\n  // Back button event listener\r\n  backToListButton.addEventListener('click', () => {\r\n    patternDetails.style.display = 'none';\r\n    document.getElementById('patterns-tab').classList.add('active');\r\n  });\r\n  \r\n  // Pagination event listeners\r\n  prevPageButton.addEventListener('click', () => {\r\n    if (currentPage > 1) {\r\n      currentPage--;\r\n      loadErrorPatterns();\r\n    }\r\n  });\r\n  \r\n  nextPageButton.addEventListener('click', () => {\r\n    if (currentPage < totalPages) {\r\n      currentPage++;\r\n      loadErrorPatterns();\r\n    }\r\n  });\r\n  \r\n  // Load error patterns from API\r\n  async function loadErrorPatterns() {\r\n    try {\r\n      patternsList.innerHTML = '<div class=\"empty-state\"><p>Loading error patterns...</p></div>';\r\n      \r\n      const response = await fetch(\r\n        `${apiBaseUrl}/api/analysis/patterns?page=${currentPage}&limit=${limit}&sortBy=frequency&sortOrder=desc`,\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      );\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to load error patterns: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!data.patterns || data.patterns.length === 0) {\r\n        patternsList.innerHTML = '<div class=\"empty-state\"><p>No error patterns found</p></div>';\r\n        return;\r\n      }\r\n      \r\n      // Update pagination\r\n      if (data.pagination) {\r\n        currentPage = data.pagination.page;\r\n        totalPages = data.pagination.totalPages;\r\n        pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;\r\n        prevPageButton.disabled = currentPage <= 1;\r\n        nextPageButton.disabled = currentPage >= totalPages;\r\n      }\r\n      \r\n      // Render patterns\r\n      patternsList.innerHTML = '';\r\n      data.patterns.forEach(pattern => {\r\n        const patternCard = document.createElement('div');\r\n        patternCard.className = 'pattern-card';\r\n        patternCard.innerHTML = `\r\n          <div class=\"pattern-header\">\r\n            <div class=\"pattern-name\">${pattern.name}</div>\r\n            <div class=\"pattern-frequency\">Frequency: ${pattern.frequency}</div>\r\n          </div>\r\n          <div class=\"pattern-description\">${pattern.description}</div>\r\n          <div class=\"pattern-meta\">\r\n            <div class=\"error-count\">Errors: ${pattern.errorCount || 0}</div>\r\n            <div class=\"updated-at\">Last seen: ${formatDate(pattern.updatedAt)}</div>\r\n          </div>\r\n        `;\r\n        \r\n        // Add click event to view pattern details\r\n        patternCard.addEventListener('click', () => {\r\n          viewPatternDetails(pattern.id);\r\n        });\r\n        \r\n        patternsList.appendChild(patternCard);\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('Error loading error patterns:', error);\r\n      patternsList.innerHTML = `\r\n        <div class=\"empty-state\">\r\n          <p>Error loading patterns: ${error.message}</p>\r\n        </div>\r\n      `;\r\n    }\r\n  }\r\n  \r\n  // View details of a specific pattern\r\n  async function viewPatternDetails(patternId) {\r\n    try {\r\n      patternDetails.style.display = 'none';\r\n      document.getElementById('detail-pattern-name').textContent = 'Loading...';\r\n      document.getElementById('detail-pattern-description').textContent = '';\r\n      document.getElementById('error-list').innerHTML = '<p>Loading errors...</p>';\r\n      \r\n      const response = await fetch(\r\n        `${apiBaseUrl}/api/analysis/patterns`,\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ patternId })\r\n        }\r\n      );\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to load pattern details: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!data.pattern) {\r\n        throw new Error('Pattern not found');\r\n      }\r\n      \r\n      const pattern = data.pattern;\r\n      \r\n      // Update pattern details\r\n      document.getElementById('detail-pattern-name').textContent = pattern.name;\r\n      document.getElementById('detail-pattern-description').textContent = pattern.description;\r\n      \r\n      // Render error list\r\n      const errorList = document.getElementById('error-list');\r\n      errorList.innerHTML = '';\r\n      \r\n      if (!pattern.recentErrors || pattern.recentErrors.length === 0) {\r\n        errorList.innerHTML = '<p>No errors found for this pattern</p>';\r\n      } else {\r\n        pattern.recentErrors.forEach(error => {\r\n          const errorItem = document.createElement('div');\r\n          errorItem.className = 'error-item';\r\n          errorItem.innerHTML = `\r\n            <div><strong>Error:</strong> ${error.errorMessage}</div>\r\n            <div><strong>Type:</strong> ${error.errorType}</div>\r\n            ${error.lineNumber ? `<div><strong>Line:</strong> ${error.lineNumber}</div>` : ''}\r\n            ${error.problem ? `<div><strong>Problem:</strong> ${error.problem.title} (${error.problem.difficulty})</div>` : ''}\r\n            <div><strong>Date:</strong> ${formatDate(error.createdAt)}</div>\r\n          `;\r\n          errorList.appendChild(errorItem);\r\n        });\r\n      }\r\n      \r\n      // Show charts if data available\r\n      if (pattern.statistics) {\r\n        renderErrorTypeChart(pattern.statistics.errorTypeDistribution);\r\n        renderDifficultyChart(pattern.statistics.difficultyDistribution);\r\n      }\r\n      \r\n      // Show the pattern details\r\n      patternDetails.style.display = 'block';\r\n      document.getElementById('patterns-tab').classList.remove('active');\r\n      \r\n    } catch (error) {\r\n      console.error('Error loading pattern details:', error);\r\n      document.getElementById('detail-pattern-name').textContent = 'Error';\r\n      document.getElementById('detail-pattern-description').textContent = `Failed to load pattern: ${error.message}`;\r\n      patternDetails.style.display = 'block';\r\n    }\r\n  }\r\n  \r\n  // Load overall error statistics\r\n  async function loadErrorStatistics() {\r\n    // This would be implemented in a future version\r\n    // For now, we'll display a placeholder\r\n    document.getElementById('error-types-chart').innerHTML = `\r\n      <h3>Error Types</h3>\r\n      <p style=\"padding: 20px; text-align: center;\">Statistics will be available in a future update</p>\r\n    `;\r\n    \r\n    document.getElementById('difficulty-chart').innerHTML = `\r\n      <h3>By Difficulty</h3>\r\n      <p style=\"padding: 20px; text-align: center;\">Statistics will be available in a future update</p>\r\n    `;\r\n  }\r\n  \r\n  // Render error type distribution chart\r\n  function renderErrorTypeChart(data) {\r\n    const chart = document.getElementById('detail-error-types-chart');\r\n    chart.innerHTML = '<h3>Error Types</h3>';\r\n    \r\n    if (!data || data.length === 0) {\r\n      chart.innerHTML += '<p style=\"padding: 10px; text-align: center;\">No data available</p>';\r\n      return;\r\n    }\r\n    \r\n    // For now, just render a simple representation\r\n    // In a production version, we'd use a proper chart library\r\n    const container = document.createElement('div');\r\n    container.style.padding = '10px';\r\n    \r\n    data.forEach(item => {\r\n      const bar = document.createElement('div');\r\n      bar.style.display = 'flex';\r\n      bar.style.marginBottom = '5px';\r\n      bar.style.alignItems = 'center';\r\n      \r\n      const label = document.createElement('div');\r\n      label.style.width = '120px';\r\n      label.style.fontSize = '12px';\r\n      label.textContent = item.type;\r\n      \r\n      const barContainer = document.createElement('div');\r\n      barContainer.style.flex = '1';\r\n      barContainer.style.height = '15px';\r\n      barContainer.style.backgroundColor = '#eee';\r\n      barContainer.style.borderRadius = '3px';\r\n      barContainer.style.overflow = 'hidden';\r\n      \r\n      const barFill = document.createElement('div');\r\n      barFill.style.height = '100%';\r\n      barFill.style.width = `${Math.min(100, item.count * 10)}%`;\r\n      barFill.style.backgroundColor = '#64b5f6';\r\n      \r\n      const count = document.createElement('div');\r\n      count.style.width = '30px';\r\n      count.style.fontSize = '12px';\r\n      count.style.marginLeft = '5px';\r\n      count.textContent = item.count;\r\n      \r\n      barContainer.appendChild(barFill);\r\n      bar.appendChild(label);\r\n      bar.appendChild(barContainer);\r\n      bar.appendChild(count);\r\n      container.appendChild(bar);\r\n    });\r\n    \r\n    chart.appendChild(container);\r\n  }\r\n  \r\n  // Render difficulty distribution chart\r\n  function renderDifficultyChart(data) {\r\n    const chart = document.getElementById('detail-difficulty-chart');\r\n    chart.innerHTML = '<h3>By Difficulty</h3>';\r\n    \r\n    if (!data || data.length === 0) {\r\n      chart.innerHTML += '<p style=\"padding: 10px; text-align: center;\">No data available</p>';\r\n      return;\r\n    }\r\n    \r\n    // For now, just render a simple representation\r\n    const container = document.createElement('div');\r\n    container.style.padding = '10px';\r\n    \r\n    // Define colors for difficulties\r\n    const colors = {\r\n      Easy: '#66bb6a',\r\n      Medium: '#ffa726',\r\n      Hard: '#ef5350'\r\n    };\r\n    \r\n    data.forEach(item => {\r\n      const bar = document.createElement('div');\r\n      bar.style.display = 'flex';\r\n      bar.style.marginBottom = '5px';\r\n      bar.style.alignItems = 'center';\r\n      \r\n      const label = document.createElement('div');\r\n      label.style.width = '120px';\r\n      label.style.fontSize = '12px';\r\n      label.textContent = item.difficulty;\r\n      \r\n      const barContainer = document.createElement('div');\r\n      barContainer.style.flex = '1';\r\n      barContainer.style.height = '15px';\r\n      barContainer.style.backgroundColor = '#eee';\r\n      barContainer.style.borderRadius = '3px';\r\n      barContainer.style.overflow = 'hidden';\r\n      \r\n      const barFill = document.createElement('div');\r\n      barFill.style.height = '100%';\r\n      barFill.style.width = `${Math.min(100, item.count * 10)}%`;\r\n      barFill.style.backgroundColor = colors[item.difficulty] || '#64b5f6';\r\n      \r\n      const count = document.createElement('div');\r\n      count.style.width = '30px';\r\n      count.style.fontSize = '12px';\r\n      count.style.marginLeft = '5px';\r\n      count.textContent = item.count;\r\n      \r\n      barContainer.appendChild(barFill);\r\n      bar.appendChild(label);\r\n      bar.appendChild(barContainer);\r\n      bar.appendChild(count);\r\n      container.appendChild(bar);\r\n    });\r\n    \r\n    chart.appendChild(container);\r\n  }\r\n  \r\n  // Format date for display\r\n  function formatDate(dateString) {\r\n    if (!dateString) return 'Unknown';\r\n    \r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const diffMs = now - date;\r\n    const diffSec = Math.floor(diffMs / 1000);\r\n    const diffMin = Math.floor(diffSec / 60);\r\n    const diffHour = Math.floor(diffMin / 60);\r\n    const diffDay = Math.floor(diffHour / 24);\r\n    \r\n    if (diffDay > 0) {\r\n      return diffDay === 1 ? 'Yesterday' : `${diffDay} days ago`;\r\n    } else if (diffHour > 0) {\r\n      return `${diffHour} hour${diffHour > 1 ? 's' : ''} ago`;\r\n    } else if (diffMin > 0) {\r\n      return `${diffMin} minute${diffMin > 1 ? 's' : ''} ago`;\r\n    } else {\r\n      return 'Just now';\r\n    }\r\n  }\r\n  \r\n  // Initial load\r\n  loadErrorPatterns();\r\n}); \r\n \r\n \r\n "],"names":[],"sourceRoot":""}