{"version":3,"file":"pageFetchInterceptor.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://extension/webpack/bootstrap","webpack://extension/webpack/runtime/make namespace object","webpack://extension/./content/pageFetchInterceptor.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable no-unused-vars */\r\n// pageFetchInterceptor.js\r\n\r\n// This script runs in the page context to intercept fetch and capture submissions.\r\n;(function() {\r\n  // Store the original fetch function\r\n  const originalFetch = window.fetch;\r\n  console.log('[DSA Tracker Injected] Fetch interceptor installed');\r\n\r\n  // Add a debug function to show visible notifications for debugging\r\n  function showDebugNotification(message, type = 'info') {\r\n    try {\r\n      let container = document.getElementById('dsa-tracker-debug-container');\r\n      if (!container) {\r\n        container = document.createElement('div');\r\n        container.id = 'dsa-tracker-debug-container';\r\n        container.style.position = 'fixed';\r\n        container.style.bottom = '10px';\r\n        container.style.right = '10px';\r\n        container.style.zIndex = '10000';\r\n        container.style.maxWidth = '300px';\r\n        container.style.maxHeight = '400px';\r\n        container.style.overflow = 'auto';\r\n        document.body.appendChild(container);\r\n      }\r\n      const notification = document.createElement('div');\r\n      notification.style.padding = '10px';\r\n      notification.style.margin = '5px';\r\n      notification.style.borderRadius = '5px';\r\n      notification.style.fontSize = '12px';\r\n      notification.style.fontFamily = 'monospace';\r\n      notification.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\r\n      notification.style.opacity = '0.9';\r\n      if (type === 'error') {\r\n        notification.style.backgroundColor = '#ffcccc';\r\n        notification.style.color = '#990000';\r\n      } else if (type === 'success') {\r\n        notification.style.backgroundColor = '#ccffcc';\r\n        notification.style.color = '#006600';\r\n      } else {\r\n        notification.style.backgroundColor = '#e6f7ff';\r\n        notification.style.color = '#0066cc';\r\n      }\r\n      notification.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;\r\n      container.appendChild(notification);\r\n      setTimeout(() => {\r\n        if (notification.parentNode) {\r\n          notification.parentNode.removeChild(notification);\r\n        }\r\n      }, 10000);\r\n    } catch (e) {\r\n      console.error('Error in debug notification:', e);\r\n    }\r\n  }\r\n\r\n  window.fetch = async function(...args) {\r\n    const [url, options] = args;\r\n\r\n    // Early bail if no URL\r\n    if (typeof url !== 'string') {\r\n      return originalFetch.apply(this, args);\r\n    }\r\n\r\n    // Detect potential submission calls\r\n    const submissionPatterns = [\r\n      /\\/submit\\b/,\r\n      /\\/submissions\\//,\r\n      /\\/problems\\/[^^/]+\\/submit/,\r\n      /graphql/\r\n    ];\r\n    const isSubmit = submissionPatterns.some(pattern => pattern.test(url)) && options && options.method === 'POST';\r\n    if (isSubmit) {\r\n      console.log('[DSA Tracker Injected] Potential submission request detected:', { url, method: options.method, hasBody: !!options.body });\r\n      showDebugNotification('Potential submission request detected: ' + url.substring(0, 50), 'info');\r\n    }\r\n\r\n    if (isSubmit) {\r\n      try {\r\n        const submissionTime = Date.now();\r\n        const trackerId = submissionTime + '-' + Math.random().toString(36).substring(2, 9);\r\n        showDebugNotification('Processing submission request...', 'info');\r\n        let lang, code, questionId;\r\n        const body = options.body;\r\n        if (body instanceof FormData) {\r\n          lang = body.get('lang');\r\n          const raw = body.get('typed_code');\r\n          code = typeof raw === 'string' ? raw : null;\r\n          questionId = body.get('question_id');\r\n          console.log('[DSA Tracker Injected] Extracted from FormData:', { lang, codeLength: code ? code.length : 0 });\r\n        } else if (typeof body === 'string') {\r\n          if (body.includes('=') && body.includes('&')) {\r\n            const parsed = new URLSearchParams(body);\r\n            lang = parsed.get('lang');\r\n            code = parsed.get('typed_code') || parsed.get('code');\r\n            questionId = parsed.get('question_id') || parsed.get('questionId');\r\n            console.log('[DSA Tracker Injected] Extracted from URLSearchParams:', { lang, codeLength: code ? code.length : 0 });\r\n          } else {\r\n            try {\r\n              const parsed = JSON.parse(body);\r\n              if (parsed.operationName === 'submitCode' || parsed.operationName === 'submitSolution') {\r\n                const vars = parsed.variables || {};\r\n                lang = vars.lang || vars.languageSlug;\r\n                code = vars.code || vars.sourceCode || vars.typedCode;\r\n                questionId = vars.submissionId || vars.titleSlug;\r\n                console.log('[DSA Tracker Injected] Extracted from GraphQL:', { lang, codeLength: code ? code.length : 0 });\r\n              } else {\r\n                lang = parsed.lang || parsed.language;\r\n                code = parsed.typed_code || parsed.submission_code || parsed.code || parsed.sourceCode;\r\n                questionId = parsed.question_id || parsed.questionId || parsed.titleSlug;\r\n                console.log('[DSA Tracker Injected] Extracted from JSON:', { lang, codeLength: code ? code.length : 0 });\r\n              }\r\n            } catch {\r\n              console.log('[DSA Tracker Injected] Could not extract data from body');\r\n            }\r\n          }\r\n        }\r\n\r\n        // Fallback from Monaco\r\n        if (!code && window.monaco && window.monaco.editor && typeof window.monaco.editor.getEditors === 'function') {\r\n          try {\r\n            const editors = window.monaco.editor.getEditors();\r\n            if (editors.length > 0) {\r\n              code = editors[0].getValue();\r\n              console.log('[DSA Tracker Injected] Got code from Monaco editor:', { codeLength: code.length });\r\n            }\r\n          } catch {\r\n            console.log('[DSA Tracker Injected] Failed to get code from Monaco editor');\r\n          }\r\n        }\r\n\r\n        const response = await originalFetch.apply(this, args);\r\n        const clonedResponse = response.clone();\r\n        try {\r\n          const responseData = await clonedResponse.json();\r\n          console.log('[DSA Tracker Injected] Submission response:', responseData);\r\n          let extractedSubmissionId = null;\r\n          if (responseData.submission_id) extractedSubmissionId = responseData.submission_id;\r\n          else if (responseData.submissionId) extractedSubmissionId = responseData.submissionId;\r\n          else if (responseData.data && responseData.data.submitCode) extractedSubmissionId = responseData.data.submitCode.id || responseData.data.submitCode.submissionId;\r\n          else if (responseData.data && responseData.data.submitSolution) extractedSubmissionId = responseData.data.submitSolution.id || responseData.data.submitSolution.submissionId;\r\n          else if (responseData.interpret_id) extractedSubmissionId = responseData.interpret_id;\r\n          if (extractedSubmissionId) {\r\n            window.__DSA_TRACKER_SUBMISSIONS = window.__DSA_TRACKER_SUBMISSIONS || {};\r\n            window.__DSA_TRACKER_SUBMISSIONS[extractedSubmissionId] = { submissionId: extractedSubmissionId, trackerId, code, lang, questionId, timestamp: submissionTime, status: 'pending' };\r\n            console.log('[DSA Tracker Injected] Submission detected:', extractedSubmissionId);\r\n            showDebugNotification('Submission detected: ' + extractedSubmissionId, 'success');\r\n          }\r\n        } catch (e) {\r\n          console.error('[DSA Tracker Injected] Error parsing submission response:', e);\r\n          showDebugNotification('Error parsing submission response: ' + e.message, 'error');\r\n        }\r\n        return response;\r\n      } catch (e) {\r\n        console.error('[DSA Tracker Injected] Error intercepting submission:', e);\r\n        showDebugNotification('Error intercepting submission: ' + e.message, 'error');\r\n        return originalFetch.apply(this, args);\r\n      }\r\n    }\r\n\r\n    // Status check\r\n    if (typeof url === 'string' && (\r\n        /\\/submissions\\/detail\\/\\d+\\/check/.test(url) || /\\/submissions\\/\\d+/.test(url) || /\\/check\\/\\d+/.test(url) || /submission[_-]?id=\\d+/.test(url) || url.includes('check_submission') ||\r\n        (url.includes('graphql') && options && typeof options.body === 'string' && options.body.includes('submissionDetails'))\r\n      )) {\r\n      try {\r\n        let submissionId = null;\r\n        const match1 = url.match(/\\/submissions\\/detail\\/(\\d+)\\/check/);\r\n        const match2 = url.match(/\\/submissions\\/(\\d+)/);\r\n        const match3 = url.match(/\\/check\\/(\\d+)/);\r\n        const match4 = url.match(/submission[_-]?id=(\\d+)/);\r\n        if (match1) submissionId = match1[1];\r\n        else if (match2) submissionId = match2[1];\r\n        else if (match3) submissionId = match3[1];\r\n        else if (match4) submissionId = match4[1];\r\n        else if (url.includes('graphql') && options && typeof options.body === 'string') {\r\n          try { const p = JSON.parse(options.body); if (p.variables && p.variables.submissionId) submissionId = p.variables.submissionId; } catch {};\r\n        }\r\n        if (submissionId && window.__DSA_TRACKER_SUBMISSIONS && window.__DSA_TRACKER_SUBMISSIONS[submissionId]) {\r\n          console.log('[DSA Tracker Injected] Checking submission status for:', submissionId);\r\n          showDebugNotification('Checking submission status: ' + submissionId, 'info');\r\n          const response = await originalFetch.apply(this, args);\r\n          const clonedResponse = response.clone();\r\n          try {\r\n            const d = await clonedResponse.json();\r\n            console.log('[DSA Tracker Injected] Status check response:', d);\r\n            let isAccepted = d.status_msg === 'Accepted' || d.statusDisplay === 'Accepted' || d.status_code === 10 || d.statusCode === 10 || d.state === 'SUCCESS' || d.judgeResult === 'SUCCESS' || d.status === 'Accepted';\r\n            if (!isAccepted && d.data && d.data.submissionDetails) {\r\n              const det = d.data.submissionDetails;\r\n              isAccepted = det.status === 'Accepted' || det.statusDisplay === 'Accepted' || det.statusCode === 10;\r\n            }\r\n            if (isAccepted) {\r\n              const sd = window.__DSA_TRACKER_SUBMISSIONS[submissionId]; sd.status = 'accepted';\r\n              console.log('[DSA Tracker Injected] ACCEPTED submission detected:', submissionId);\r\n              showDebugNotification('ACCEPTED submission detected: ' + submissionId, 'success');\r\n              let runtime = d.status_runtime || d.runtime || (d.data && d.data.submissionDetails && d.data.submissionDetails.runtime);\r\n              let memory = d.status_memory || d.memory || (d.data && d.data.submissionDetails && d.data.submissionDetails.memory);\r\n              window.dispatchEvent(new CustomEvent('DSA_TRACKER_SUBMISSION_ACCEPTED', { detail: { submissionId, trackerId: sd.trackerId, code: sd.code, lang: sd.lang, questionId: sd.questionId, runtime, memory, timestamp: sd.timestamp } }));\r\n              delete window.__DSA_TRACKER_SUBMISSIONS[submissionId];\r\n            }\r\n          } catch (e) { console.error('[DSA Tracker Injected] Error parsing status check response:', e); showDebugNotification('Error parsing status check: ' + e.message, 'error'); }\r\n          return response;\r\n        }\r\n      } catch (e) { console.error('[DSA Tracker Injected] Error intercepting status check:', e); showDebugNotification('Error intercepting status check: ' + e.message, 'error'); }\r\n    }\r\n\r\n    return originalFetch.apply(this, args);\r\n  };\r\n\r\n  // Cleanup pending submissions older than 5 minutes\r\n  setInterval(() => {\r\n    if (window.__DSA_TRACKER_SUBMISSIONS) {\r\n      const now = Date.now();\r\n      Object.keys(window.__DSA_TRACKER_SUBMISSIONS).forEach(id => {\r\n        const s = window.__DSA_TRACKER_SUBMISSIONS[id];\r\n        if (now - s.timestamp > 5 * 60 * 1000) {\r\n          delete window.__DSA_TRACKER_SUBMISSIONS[id];\r\n        }\r\n      });\r\n    }\r\n  }, 60 * 1000);\r\n\r\n  console.log('[DSA Tracker Injected] Fetch interceptor installed and ready');\r\n  showDebugNotification('DSA Tracker fetch interceptor installed and ready', 'success');\r\n})(); "],"names":[],"sourceRoot":""}